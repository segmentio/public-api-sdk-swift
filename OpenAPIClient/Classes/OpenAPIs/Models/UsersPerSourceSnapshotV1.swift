//
// UsersPerSourceSnapshotV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A snapshot of MTU metrics for a given Source within the given usage period. */
public struct UsersPerSourceSnapshotV1: Codable, JSONEncodable, Hashable {

    /** The Source id. */
    public var sourceId: String
    /** The start of the usage period, in unix time (seconds since epoch). */
    public var periodStart: Double
    /** The end of the usage period, in unix time (seconds since epoch). */
    public var periodEnd: Double
    /** A bigint of the number of anonymous users in this snapshot. */
    public var anonymous: String
    /** A bigint of the number of anonymous identified users in this snapshot. */
    public var anonymousIdentified: String
    /** A bigint of the number of identified users in this snapshot. */
    public var identified: String
    /** A bigint of the number of never identified users in this snapshot. */
    public var neverIdentified: String
    /** The timestamp of this snapshot within the billing cycle, in the ISO-8601 format. */
    public var timestamp: String

    public init(sourceId: String, periodStart: Double, periodEnd: Double, anonymous: String, anonymousIdentified: String, identified: String, neverIdentified: String, timestamp: String) {
        self.sourceId = sourceId
        self.periodStart = periodStart
        self.periodEnd = periodEnd
        self.anonymous = anonymous
        self.anonymousIdentified = anonymousIdentified
        self.identified = identified
        self.neverIdentified = neverIdentified
        self.timestamp = timestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceId
        case periodStart
        case periodEnd
        case anonymous
        case anonymousIdentified
        case identified
        case neverIdentified
        case timestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(periodStart, forKey: .periodStart)
        try container.encode(periodEnd, forKey: .periodEnd)
        try container.encode(anonymous, forKey: .anonymous)
        try container.encode(anonymousIdentified, forKey: .anonymousIdentified)
        try container.encode(identified, forKey: .identified)
        try container.encode(neverIdentified, forKey: .neverIdentified)
        try container.encode(timestamp, forKey: .timestamp)
    }
}

