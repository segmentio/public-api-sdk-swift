//
// SyncV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a sync between a Source and Warehouse.  A sync occurs when data from a Source is loaded into a Warehouse. */
public struct SyncV1: Codable, JSONEncodable, Hashable {

    /** The id of the Source loaded in the sync. */
    public var sourceId: String
    /** The start time of the sync. */
    public var start: String
    /** The time the sync completed. Returns null if unfinished. */
    public var end: String?
    /** The status of the sync. */
    public var status: String
    /** The duration of the sync in seconds. Returns the partial duration if the sync has not finished yet. */
    public var duration: Double
    /** The human-readable counterpart of `duration`. */
    public var humanDuration: String
    /** The number of rows synced into the Warehouse. */
    public var count: Double
    /** Notices that contain the events that occurred during the sync. */
    public var notices: [SyncNoticeV1]

    public init(sourceId: String, start: String, end: String?, status: String, duration: Double, humanDuration: String, count: Double, notices: [SyncNoticeV1]) {
        self.sourceId = sourceId
        self.start = start
        self.end = end
        self.status = status
        self.duration = duration
        self.humanDuration = humanDuration
        self.count = count
        self.notices = notices
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceId
        case start
        case end
        case status
        case duration
        case humanDuration
        case count
        case notices
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(start, forKey: .start)
        try container.encode(end, forKey: .end)
        try container.encode(status, forKey: .status)
        try container.encode(duration, forKey: .duration)
        try container.encode(humanDuration, forKey: .humanDuration)
        try container.encode(count, forKey: .count)
        try container.encode(notices, forKey: .notices)
    }
}

