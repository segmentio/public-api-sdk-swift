//
// DestinationMetadataActionV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents an Action, a building block of behavior that can be performed by the Destination. */
public struct DestinationMetadataActionV1: Codable, JSONEncodable, Hashable {

    public enum Platform: String, Codable, CaseIterable {
        case cloud = "CLOUD"
        case mobile = "MOBILE"
        case web = "WEB"
    }
    /** The primary key of the action. */
    public var id: String
    /** A machine-readable key unique to the action definition. */
    public var slug: String
    /** A human-readable name for the action. */
    public var name: String
    /** A human-readable description of the action. May include Markdown. */
    public var description: String
    /** The platform on which this action runs. */
    public var platform: Platform
    /** Whether the action should be hidden. */
    public var hidden: Bool
    /** The default value used as the trigger when connecting this action. */
    public var defaultTrigger: String?
    /** The fields expected in order to perform the action. */
    public var fields: [DestinationMetadataActionFieldV1]

    public init(id: String, slug: String, name: String, description: String, platform: Platform, hidden: Bool, defaultTrigger: String?, fields: [DestinationMetadataActionFieldV1]) {
        self.id = id
        self.slug = slug
        self.name = name
        self.description = description
        self.platform = platform
        self.hidden = hidden
        self.defaultTrigger = defaultTrigger
        self.fields = fields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case slug
        case name
        case description
        case platform
        case hidden
        case defaultTrigger
        case fields
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(slug, forKey: .slug)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(platform, forKey: .platform)
        try container.encode(hidden, forKey: .hidden)
        try container.encode(defaultTrigger, forKey: .defaultTrigger)
        try container.encode(fields, forKey: .fields)
    }
}

