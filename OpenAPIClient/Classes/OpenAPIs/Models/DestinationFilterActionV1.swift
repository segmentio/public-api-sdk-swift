//
// DestinationFilterActionV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a Destination filter action. */
public struct DestinationFilterActionV1: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case allowProperties = "ALLOW_PROPERTIES"
        case drop = "DROP"
        case dropProperties = "DROP_PROPERTIES"
        case sample = "SAMPLE"
    }
    /** The kind of Transformation to apply to any matched properties. */
    public var type: ModelType
    /** A dictionary of paths to object keys that this filter applies to.   The literal string '' represents the top level of the object. */
    public var fields: [String: Array<String>]?
    /** A decimal between 0 and 1 used for 'sample' type events and influences the likelihood of sampling to occur. */
    public var percent: Double?
    /** The JSON path to a property within a payload object from which Segment generates a deterministic sampling rate. */
    public var path: String?

    public init(type: ModelType, fields: [String: Array<String>]? = nil, percent: Double? = nil, path: String? = nil) {
        self.type = type
        self.fields = fields
        self.percent = percent
        self.path = path
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case fields
        case percent
        case path
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(path, forKey: .path)
    }
}

