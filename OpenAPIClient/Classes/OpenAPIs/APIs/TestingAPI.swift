//
// TestingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TestingAPI {

    /**
     Echo
     
     - parameter message: (query) Sets the response &#x60;message&#x60; field. The response contains this field&#39;s entry.  This parameter exists in v1. 
     - parameter delay: (query) The desired response delay, in milliseconds.  This parameter exists in v1. (optional)
     - parameter triggerError: (query) If &#x60;true&#x60;, returns an HTTP &#x60;4xx&#x60; error that contains the string in &#x60;message&#x60;.  This parameter exists in v1. (optional)
     - parameter triggerMultipleErrors: (query) If &#x60;true&#x60;, returns an HTTP &#x60;4xx&#x60; error that contains the value of the &#x60;message&#x60; field in the error message array.  This has no effect if the request sets &#x60;triggerError&#x60;.  This parameter exists in v1. (optional)
     - parameter triggerUnexpectedError: (query) If &#x60;true&#x60;, triggers a &#x60;500&#x60; error.  This has no effect if the request sets either &#x60;triggerError&#x60; or &#x60;triggerMultipleErrors&#x60;.  This parameter exists in v1. (optional)
     - parameter statusCode: (query) Sets the HTTP status code to return.  This parameter exists in v1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func echo(message: String, delay: Double? = nil, triggerError: Bool? = nil, triggerMultipleErrors: Bool? = nil, triggerUnexpectedError: Bool? = nil, statusCode: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Echo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return echoWithRequestBuilder(message: message, delay: delay, triggerError: triggerError, triggerMultipleErrors: triggerMultipleErrors, triggerUnexpectedError: triggerUnexpectedError, statusCode: statusCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Echo
     - GET /echo
     - Public Echo endpoint.
     - BASIC:
       - type: http
       - name: token
     - parameter message: (query) Sets the response &#x60;message&#x60; field. The response contains this field&#39;s entry.  This parameter exists in v1. 
     - parameter delay: (query) The desired response delay, in milliseconds.  This parameter exists in v1. (optional)
     - parameter triggerError: (query) If &#x60;true&#x60;, returns an HTTP &#x60;4xx&#x60; error that contains the string in &#x60;message&#x60;.  This parameter exists in v1. (optional)
     - parameter triggerMultipleErrors: (query) If &#x60;true&#x60;, returns an HTTP &#x60;4xx&#x60; error that contains the value of the &#x60;message&#x60; field in the error message array.  This has no effect if the request sets &#x60;triggerError&#x60;.  This parameter exists in v1. (optional)
     - parameter triggerUnexpectedError: (query) If &#x60;true&#x60;, triggers a &#x60;500&#x60; error.  This has no effect if the request sets either &#x60;triggerError&#x60; or &#x60;triggerMultipleErrors&#x60;.  This parameter exists in v1. (optional)
     - parameter statusCode: (query) Sets the HTTP status code to return.  This parameter exists in v1. (optional)
     - returns: RequestBuilder<Echo200Response> 
     */
    open class func echoWithRequestBuilder(message: String, delay: Double? = nil, triggerError: Bool? = nil, triggerMultipleErrors: Bool? = nil, triggerUnexpectedError: Bool? = nil, statusCode: Double? = nil) -> RequestBuilder<Echo200Response> {
        let localVariablePath = "/echo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "message": message.encodeToJSON(),
            "delay": delay?.encodeToJSON(),
            "triggerError": triggerError?.encodeToJSON(),
            "triggerMultipleErrors": triggerMultipleErrors?.encodeToJSON(),
            "triggerUnexpectedError": triggerUnexpectedError?.encodeToJSON(),
            "statusCode": statusCode?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Echo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
