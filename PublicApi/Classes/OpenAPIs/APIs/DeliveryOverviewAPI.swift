//
// DeliveryOverviewAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeliveryOverviewAPI {

    /**
     Get Egress Failed Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEgressFailedMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewDestMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getEgressFailedMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Egress Failed Metrics from Delivery Overview
     - GET /delivery-overview/failed-delivery
     - Get events that failed to be delivered to Destination.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getEgressFailedMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewDestMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/failed-delivery"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Egress Success Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEgressSuccessMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewDestMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getEgressSuccessMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Egress Success Metrics from Delivery Overview
     - GET /delivery-overview/successful-delivery
     - Get events successfully delivered to Destination.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getEgressSuccessMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewDestMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/successful-delivery"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Filtered At Destination Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFilteredAtDestinationMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewDestMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getFilteredAtDestinationMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Filtered At Destination Metrics from Delivery Overview
     - GET /delivery-overview/filtered-at-destination
     - Get events that were filtered at Destination.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Destination pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getFilteredAtDestinationMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewDestMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/filtered-at-destination"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Filtered At Source Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFilteredAtSourceMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewSourceMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getFilteredAtSourceMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Filtered At Source Metrics from Delivery Overview
     - GET /delivery-overview/filtered-at-source
     - Get events that were filtered at Source.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getFilteredAtSourceMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewSourceMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/filtered-at-source"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Ingress Failed Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIngressFailedMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewSourceMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getIngressFailedMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ingress Failed Metrics from Delivery Overview
     - GET /delivery-overview/failed-on-ingest
     - Get events that failed on ingest.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getIngressFailedMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewSourceMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/failed-on-ingest"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Ingress Success Metrics from Delivery Overview
     
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIngressSuccessMetricsFromDeliveryOverview(metrics: GetDeliveryOverviewSourceMetricsBetaInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetEgressFailedMetricsFromDeliveryOverview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getIngressSuccessMetricsFromDeliveryOverviewWithRequestBuilder(metrics: metrics).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Ingress Success Metrics from Delivery Overview
     - GET /delivery-overview/successfully-received
     - Get events that were successfully received by Segment.
     - BASIC:
       - type: http
       - name: token
     - parameter metrics: (query) Metrics for this Source pipeline step.  This parameter exists in beta. 
     - returns: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> 
     */
    open class func getIngressSuccessMetricsFromDeliveryOverviewWithRequestBuilder(metrics: GetDeliveryOverviewSourceMetricsBetaInput) -> RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response> {
        let localVariablePath = "/delivery-overview/successfully-received"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "metrics": metrics.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEgressFailedMetricsFromDeliveryOverview200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
