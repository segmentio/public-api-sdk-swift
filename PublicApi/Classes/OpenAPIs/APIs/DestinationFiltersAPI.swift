//
// DestinationFiltersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DestinationFiltersAPI {

    /**
     Create Filter for Destination
     
     - parameter destinationId: (path)  
     - parameter createFilterForDestinationV1Input: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createFilterForDestination(destinationId: String, createFilterForDestinationV1Input: CreateFilterForDestinationV1Input, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFilterForDestination200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createFilterForDestinationWithRequestBuilder(destinationId: destinationId, createFilterForDestinationV1Input: createFilterForDestinationV1Input).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Filter for Destination
     - POST /destination/{destinationId}/filters
     - Creates a filter in a Destination.    â€¢ When called, this endpoint may generate the `Destination Filter Created` event in the [audit trail](/tag/Audit-Trail).       
     - BASIC:
       - type: http
       - name: token
     - parameter destinationId: (path)  
     - parameter createFilterForDestinationV1Input: (body)  
     - returns: RequestBuilder<CreateFilterForDestination200Response> 
     */
    open class func createFilterForDestinationWithRequestBuilder(destinationId: String, createFilterForDestinationV1Input: CreateFilterForDestinationV1Input) -> RequestBuilder<CreateFilterForDestination200Response> {
        var localVariablePath = "/destination/{destinationId}/filters"
        let destinationIdPreEscape = "\(APIHelper.mapValueToPathItem(destinationId))"
        let destinationIdPostEscape = destinationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{destinationId}", with: destinationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createFilterForDestinationV1Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFilterForDestination200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Filter in Destination
     
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFilterInDestination(destinationId: String, filterId: String, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetFilterInDestination200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getFilterInDestinationWithRequestBuilder(destinationId: destinationId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Filter in Destination
     - GET /destination/{destinationId}/filters/{filterId}
     - Gets a Destination filter by id.
     - BASIC:
       - type: http
       - name: token
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - returns: RequestBuilder<GetFilterInDestination200Response> 
     */
    open class func getFilterInDestinationWithRequestBuilder(destinationId: String, filterId: String) -> RequestBuilder<GetFilterInDestination200Response> {
        var localVariablePath = "/destination/{destinationId}/filters/{filterId}"
        let destinationIdPreEscape = "\(APIHelper.mapValueToPathItem(destinationId))"
        let destinationIdPostEscape = destinationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{destinationId}", with: destinationIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetFilterInDestination200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Filters from Destination
     
     - parameter destinationId: (path)  
     - parameter pagination: (query) Pagination options.  This parameter exists in v1. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listFiltersFromDestination(destinationId: String, pagination: PaginationInput, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: ListFiltersFromDestination200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listFiltersFromDestinationWithRequestBuilder(destinationId: destinationId, pagination: pagination).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Filters from Destination
     - GET /destination/{destinationId}/filters
     - Lists filters for a Destination.
     - BASIC:
       - type: http
       - name: token
     - parameter destinationId: (path)  
     - parameter pagination: (query) Pagination options.  This parameter exists in v1. 
     - returns: RequestBuilder<ListFiltersFromDestination200Response> 
     */
    open class func listFiltersFromDestinationWithRequestBuilder(destinationId: String, pagination: PaginationInput) -> RequestBuilder<ListFiltersFromDestination200Response> {
        var localVariablePath = "/destination/{destinationId}/filters"
        let destinationIdPreEscape = "\(APIHelper.mapValueToPathItem(destinationId))"
        let destinationIdPostEscape = destinationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{destinationId}", with: destinationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pagination": pagination.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFiltersFromDestination200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Preview Destination Filter
     
     - parameter previewDestinationFilterV1Input: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func previewDestinationFilter(previewDestinationFilterV1Input: PreviewDestinationFilterV1Input, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: PreviewDestinationFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return previewDestinationFilterWithRequestBuilder(previewDestinationFilterV1Input: previewDestinationFilterV1Input).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Preview Destination Filter
     - POST /destination/filters/preview
     - Simulates the application of a Destination filter to a provided JSON payload.
     - BASIC:
       - type: http
       - name: token
     - parameter previewDestinationFilterV1Input: (body)  
     - returns: RequestBuilder<PreviewDestinationFilter200Response> 
     */
    open class func previewDestinationFilterWithRequestBuilder(previewDestinationFilterV1Input: PreviewDestinationFilterV1Input) -> RequestBuilder<PreviewDestinationFilter200Response> {
        let localVariablePath = "/destination/filters/preview"
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: previewDestinationFilterV1Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PreviewDestinationFilter200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove Filter from Destination
     
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeFilterFromDestination(destinationId: String, filterId: String, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: RemoveFilterFromDestination200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return removeFilterFromDestinationWithRequestBuilder(destinationId: destinationId, filterId: filterId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove Filter from Destination
     - DELETE /destination/{destinationId}/filters/{filterId}
     - Deletes a Destination filter.    â€¢ When called, this endpoint may generate the `Destination Filter Deleted` event in the [audit trail](/tag/Audit-Trail).       
     - BASIC:
       - type: http
       - name: token
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - returns: RequestBuilder<RemoveFilterFromDestination200Response> 
     */
    open class func removeFilterFromDestinationWithRequestBuilder(destinationId: String, filterId: String) -> RequestBuilder<RemoveFilterFromDestination200Response> {
        var localVariablePath = "/destination/{destinationId}/filters/{filterId}"
        let destinationIdPreEscape = "\(APIHelper.mapValueToPathItem(destinationId))"
        let destinationIdPostEscape = destinationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{destinationId}", with: destinationIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RemoveFilterFromDestination200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Filter for Destination
     
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - parameter updateFilterForDestinationV1Input: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateFilterForDestination(destinationId: String, filterId: String, updateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input, apiResponseQueue: DispatchQueue = PublicApiAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateFilterForDestination200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateFilterForDestinationWithRequestBuilder(destinationId: destinationId, filterId: filterId, updateFilterForDestinationV1Input: updateFilterForDestinationV1Input).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Filter for Destination
     - PATCH /destination/{destinationId}/filters/{filterId}
     - Updates a filter in a Destination.    â€¢ When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
     - BASIC:
       - type: http
       - name: token
     - parameter destinationId: (path)  
     - parameter filterId: (path)  
     - parameter updateFilterForDestinationV1Input: (body)  
     - returns: RequestBuilder<UpdateFilterForDestination200Response> 
     */
    open class func updateFilterForDestinationWithRequestBuilder(destinationId: String, filterId: String, updateFilterForDestinationV1Input: UpdateFilterForDestinationV1Input) -> RequestBuilder<UpdateFilterForDestination200Response> {
        var localVariablePath = "/destination/{destinationId}/filters/{filterId}"
        let destinationIdPreEscape = "\(APIHelper.mapValueToPathItem(destinationId))"
        let destinationIdPostEscape = destinationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{destinationId}", with: destinationIdPostEscape, options: .literal, range: nil)
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filterId}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = PublicApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateFilterForDestinationV1Input)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFilterForDestination200Response>.Type = PublicApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
