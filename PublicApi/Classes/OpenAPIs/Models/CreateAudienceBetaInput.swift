//
// CreateAudienceBetaInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Input to create an audience. */
public struct CreateAudienceBetaInput: Codable, JSONEncodable, Hashable {

    public enum ProductVariant: String, Codable, CaseIterable {
        case accounts = "ACCOUNTS"
        case linked = "LINKED"
        case users = "USERS"
    }
    /** Name of the audience. */
    public var name: String
    /** Determines whether a computation is enabled. */
    public var enabled: Bool?
    /** Description of the audience. */
    public var description: String?
    public var computeConditionsWrapper: ComputeConditionsWrapper
    /** Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED. */
    public var productVariant: ProductVariant
    public var options: Options2?

    public init(name: String, enabled: Bool? = nil, description: String? = nil, computeConditionsWrapper: ComputeConditionsWrapper, productVariant: ProductVariant, options: Options2? = nil) {
        self.name = name
        self.enabled = enabled
        self.description = description
        self.computeConditionsWrapper = computeConditionsWrapper
        self.productVariant = productVariant
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case enabled
        case description
        case computeConditionsWrapper
        case productVariant
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(computeConditionsWrapper, forKey: .computeConditionsWrapper)
        try container.encode(productVariant, forKey: .productVariant)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

