//
// DeliveryOverviewAudienceFilterBy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The &#x60;DeliveryOverviewAudienceFilterBy&#x60; object is a map of the filterable fields and their values. */
public struct DeliveryOverviewAudienceFilterBy: Codable, JSONEncodable, Hashable {

    /** A list of strings of event names. */
    public var eventName: [String]?
    /** A list of strings of event types. Valid options are: `alias`, `group`, `identify`, `page`, `screen`, and `track`. */
    public var eventType: [String]?
    /** A list of strings of event context IDs from a Linked Audience mapping/activation. */
    public var activationId: [String]?
    /** A list of strings of audience IDs for a Linked Audience. */
    public var audienceId: [String]?
    /** A list of strings of space IDs for a Linked Audience. */
    public var spaceId: [String]?

    public init(eventName: [String]? = nil, eventType: [String]? = nil, activationId: [String]? = nil, audienceId: [String]? = nil, spaceId: [String]? = nil) {
        self.eventName = eventName
        self.eventType = eventType
        self.activationId = activationId
        self.audienceId = audienceId
        self.spaceId = spaceId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventName
        case eventType
        case activationId
        case audienceId
        case spaceId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(activationId, forKey: .activationId)
        try container.encodeIfPresent(audienceId, forKey: .audienceId)
        try container.encodeIfPresent(spaceId, forKey: .spaceId)
    }
}

