//
// ReverseETLSync.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The reverse ETL connection job that was manually started. */
public struct ReverseETLSync: Codable, JSONEncodable, Hashable {

    /** The id of the sync. */
    public var syncId: String
    /** The Model id of the sync. */
    public var modelId: String
    /** The Source id of the sync. */
    public var sourceId: String
    /** The status of the sync. It currently can be IN_PROGRESS, FAIL, SUCCESS, PARTIAL_SUCCESS. */
    public var syncStatus: String
    /** The duration of the sync. */
    public var duration: String
    /** When the sync started. */
    public var startedAt: String
    /** When the sync started. */
    public var finishedAt: String?
    public var extractPhase: ExtractPhase?
    public var loadPhase: LoadPhase?
    /** Error message if applicable. */
    public var error: String?
    /** Error code indicates a fatal sync error code, if applicable. */
    public var errorCode: String?

    public init(syncId: String, modelId: String, sourceId: String, syncStatus: String, duration: String, startedAt: String, finishedAt: String? = nil, extractPhase: ExtractPhase? = nil, loadPhase: LoadPhase? = nil, error: String? = nil, errorCode: String? = nil) {
        self.syncId = syncId
        self.modelId = modelId
        self.sourceId = sourceId
        self.syncStatus = syncStatus
        self.duration = duration
        self.startedAt = startedAt
        self.finishedAt = finishedAt
        self.extractPhase = extractPhase
        self.loadPhase = loadPhase
        self.error = error
        self.errorCode = errorCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case syncId
        case modelId
        case sourceId
        case syncStatus
        case duration
        case startedAt
        case finishedAt
        case extractPhase
        case loadPhase
        case error
        case errorCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(syncId, forKey: .syncId)
        try container.encode(modelId, forKey: .modelId)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(syncStatus, forKey: .syncStatus)
        try container.encode(duration, forKey: .duration)
        try container.encode(startedAt, forKey: .startedAt)
        try container.encodeIfPresent(finishedAt, forKey: .finishedAt)
        try container.encodeIfPresent(extractPhase, forKey: .extractPhase)
        try container.encodeIfPresent(loadPhase, forKey: .loadPhase)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
    }
}

