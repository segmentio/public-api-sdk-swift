//
// DestinationSubscriptionUpdateInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The input parameters for updating a Destination subscription. */
public struct DestinationSubscriptionUpdateInput: Codable, JSONEncodable, Hashable {

    /** The user-defined name for the subscription. */
    public var name: String?
    /** The fql statement. */
    public var trigger: String?
    /** Is the subscription enabled. */
    public var enabled: Bool?
    /** The fields used for configuring this action. */
    public var settings: JSON?
    /** (Reverse ETL only) The reverse ETL model to attach this subscription to. */
    public var reverseETLModelId: String?
    public var reverseETLSchedule: ReverseETLSchedule1?

    public init(name: String? = nil, trigger: String? = nil, enabled: Bool? = nil, settings: JSON? = nil, reverseETLModelId: String? = nil, reverseETLSchedule: ReverseETLSchedule1? = nil) {
        self.name = name
        self.trigger = trigger
        self.enabled = enabled
        self.settings = settings
        self.reverseETLModelId = reverseETLModelId
        self.reverseETLSchedule = reverseETLSchedule
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case trigger
        case enabled
        case settings
        case reverseETLModelId
        case reverseETLSchedule
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(trigger, forKey: .trigger)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(reverseETLModelId, forKey: .reverseETLModelId)
        try container.encodeIfPresent(reverseETLSchedule, forKey: .reverseETLSchedule)
    }
}

