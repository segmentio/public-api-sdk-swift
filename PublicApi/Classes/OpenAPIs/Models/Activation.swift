//
// Activation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Activation: Codable, JSONEncodable, Hashable {

    /** The activation id. */
    public var id: String
    /** Activation Enabled Status. */
    public var enabled: Bool
    /** The WORKSPACE id. */
    public var workspaceId: String
    /** The space id. */
    public var spaceId: String
    /** The audience id. */
    public var audienceId: String
    /** The connection id. */
    public var connectionId: String
    /** Type of activation trigger. */
    public var activationType: String
    /** Name of the activation. */
    public var activationName: String
    public var personalization: Personalization1
    public var destinationMapping: DestinationMapping1?
    /** Whether to perform a resync after creation of the activation. */
    public var performResync: Bool?

    public init(id: String, enabled: Bool, workspaceId: String, spaceId: String, audienceId: String, connectionId: String, activationType: String, activationName: String, personalization: Personalization1, destinationMapping: DestinationMapping1? = nil, performResync: Bool? = nil) {
        self.id = id
        self.enabled = enabled
        self.workspaceId = workspaceId
        self.spaceId = spaceId
        self.audienceId = audienceId
        self.connectionId = connectionId
        self.activationType = activationType
        self.activationName = activationName
        self.personalization = personalization
        self.destinationMapping = destinationMapping
        self.performResync = performResync
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case enabled
        case workspaceId
        case spaceId
        case audienceId
        case connectionId
        case activationType
        case activationName
        case personalization
        case destinationMapping
        case performResync
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(workspaceId, forKey: .workspaceId)
        try container.encode(spaceId, forKey: .spaceId)
        try container.encode(audienceId, forKey: .audienceId)
        try container.encode(connectionId, forKey: .connectionId)
        try container.encode(activationType, forKey: .activationType)
        try container.encode(activationName, forKey: .activationName)
        try container.encode(personalization, forKey: .personalization)
        try container.encodeIfPresent(destinationMapping, forKey: .destinationMapping)
        try container.encodeIfPresent(performResync, forKey: .performResync)
    }
}

