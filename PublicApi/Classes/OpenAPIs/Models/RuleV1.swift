//
// RuleV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a rule from a Tracking Plan. */
public struct RuleV1: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case common = "COMMON"
        case group = "GROUP"
        case identify = "IDENTIFY"
        case page = "PAGE"
        case screen = "SCREEN"
        case track = "TRACK"
    }
    /** The type for this Tracking Plan rule. */
    public var type: ModelType
    /** Key to this rule (free-form string like 'Button clicked'). */
    public var key: String?
    /** JSON Schema of this rule. */
    public var jsonSchema: AnyCodable?
    /** Version of this rule. */
    public var version: Double
    /** The timestamp of this rule's creation. */
    public var createdAt: String?
    /** The timestamp of this rule's last change. */
    public var updatedAt: String?
    /** The timestamp of this rule's deprecation. */
    public var deprecatedAt: String?

    public init(type: ModelType, key: String? = nil, jsonSchema: AnyCodable?, version: Double, createdAt: String? = nil, updatedAt: String? = nil, deprecatedAt: String? = nil) {
        self.type = type
        self.key = key
        self.jsonSchema = jsonSchema
        self.version = version
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deprecatedAt = deprecatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case key
        case jsonSchema
        case version
        case createdAt
        case updatedAt
        case deprecatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encode(jsonSchema, forKey: .jsonSchema)
        try container.encode(version, forKey: .version)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(deprecatedAt, forKey: .deprecatedAt)
    }
}

