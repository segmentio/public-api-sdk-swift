//
// DestinationSubscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The Destination subscription. */
public struct DestinationSubscription: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the subscription. */
    public var id: String
    /** The name of the subscription. */
    public var name: String
    /** The unique identifier for the Destination action to trigger. */
    public var actionId: String
    /** The URL-friendly key for the associated Destination action. */
    public var actionSlug: String
    /** The associated Destination instance id. */
    public var destinationId: String
    /** Is the subscription enabled. */
    public var enabled: Bool
    /** The customer settings for action fields. */
    public var settings: JSON?
    /** FQL string that describes what events should trigger a Destination action. */
    public var trigger: String
    /** The unique identifier for the linked ReverseETLModel, if this part of a Reverse ETL connection. */
    public var modelId: String?

    public init(id: String, name: String, actionId: String, actionSlug: String, destinationId: String, enabled: Bool, settings: JSON?, trigger: String, modelId: String? = nil) {
        self.id = id
        self.name = name
        self.actionId = actionId
        self.actionSlug = actionSlug
        self.destinationId = destinationId
        self.enabled = enabled
        self.settings = settings
        self.trigger = trigger
        self.modelId = modelId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case actionId
        case actionSlug
        case destinationId
        case enabled
        case settings
        case trigger
        case modelId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(actionId, forKey: .actionId)
        try container.encode(actionSlug, forKey: .actionSlug)
        try container.encode(destinationId, forKey: .destinationId)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(settings, forKey: .settings)
        try container.encode(trigger, forKey: .trigger)
        try container.encodeIfPresent(modelId, forKey: .modelId)
    }
}

