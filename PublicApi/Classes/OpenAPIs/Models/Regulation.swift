//
// Regulation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The regulate request. */
public struct Regulation: Codable, JSONEncodable, Hashable {

    public enum OverallStatus: String, Codable, CaseIterable {
        case failed = "FAILED"
        case finished = "FINISHED"
        case initialized = "INITIALIZED"
        case invalid = "INVALID"
        case inProgress = "IN_PROGRESS"
        case notSupported = "NOT_SUPPORTED"
        case partialSuccess = "PARTIAL_SUCCESS"
        case running = "RUNNING"
        case success = "SUCCESS"
    }
    /** The id of the regulate request. */
    public var id: String
    /** The id of the Workspace that the regulate request belongs to. */
    public var workspaceId: String
    /** The current status of the regulate request. */
    public var overallStatus: OverallStatus
    /** The timestamp of when the request finished. */
    public var finishedAt: String
    /** The timestamp of the creation of the request. */
    public var createdAt: String
    /** The status of each stream including all the Destinations that correspond to the stream. */
    public var streamStatus: [StreamStatusV1]

    public init(id: String, workspaceId: String, overallStatus: OverallStatus, finishedAt: String, createdAt: String, streamStatus: [StreamStatusV1]) {
        self.id = id
        self.workspaceId = workspaceId
        self.overallStatus = overallStatus
        self.finishedAt = finishedAt
        self.createdAt = createdAt
        self.streamStatus = streamStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case workspaceId
        case overallStatus
        case finishedAt
        case createdAt
        case streamStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(workspaceId, forKey: .workspaceId)
        try container.encode(overallStatus, forKey: .overallStatus)
        try container.encode(finishedAt, forKey: .finishedAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(streamStatus, forKey: .streamStatus)
    }
}

