//
// CreateFunctionV1Input.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Creates a Function. */
public struct CreateFunctionV1Input: Codable, JSONEncodable, Hashable {

    public enum ResourceType: String, Codable, CaseIterable {
        case destination = "DESTINATION"
        case insert = "INSERT"
        case insertDestination = "INSERT_DESTINATION"
        case insertSource = "INSERT_SOURCE"
        case source = "SOURCE"
    }
    /** The Function code. */
    public var code: String
    /** The list of settings for this Function. */
    public var settings: [FunctionSettingV1]?
    /** A display name for this Function.  Note that Destination Functions append the Workspace to the display name. */
    public var displayName: String
    /** The URL of the logo for this Function. */
    public var logoUrl: String?
    /** The Function type.  Config API note: equal to `type`. */
    public var resourceType: ResourceType
    /** A description for this Function. */
    public var description: String?

    public init(code: String, settings: [FunctionSettingV1]? = nil, displayName: String, logoUrl: String? = nil, resourceType: ResourceType, description: String? = nil) {
        self.code = code
        self.settings = settings
        self.displayName = displayName
        self.logoUrl = logoUrl
        self.resourceType = resourceType
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case settings
        case displayName
        case logoUrl
        case resourceType
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(code, forKey: .code)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encode(displayName, forKey: .displayName)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encode(resourceType, forKey: .resourceType)
        try container.encodeIfPresent(description, forKey: .description)
    }
}

