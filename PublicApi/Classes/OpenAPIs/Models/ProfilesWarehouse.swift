//
// ProfilesWarehouse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The newly created Warehouse. */
public struct ProfilesWarehouse: Codable, JSONEncodable, Hashable {

    /** The id of the Warehouse. */
    public var id: String
    /** The Space id. */
    public var spaceId: String
    public var metadata: Metadata1
    /** The id of the Workspace that owns this Warehouse. */
    public var workspaceId: String
    /** When set to true, this Warehouse receives data. */
    public var enabled: Bool
    /** The settings associated with this Warehouse.  Common settings are connection-related configuration used to connect to it, for example host, username, and port. */
    public var settings: JSON?
    /** The custom schema name that Segment uses on the Warehouse side. */
    public var schemaName: String?

    public init(id: String, spaceId: String, metadata: Metadata1, workspaceId: String, enabled: Bool, settings: JSON?, schemaName: String? = nil) {
        self.id = id
        self.spaceId = spaceId
        self.metadata = metadata
        self.workspaceId = workspaceId
        self.enabled = enabled
        self.settings = settings
        self.schemaName = schemaName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case spaceId
        case metadata
        case workspaceId
        case enabled
        case settings
        case schemaName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(spaceId, forKey: .spaceId)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(workspaceId, forKey: .workspaceId)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(settings, forKey: .settings)
        try container.encodeIfPresent(schemaName, forKey: .schemaName)
    }
}

