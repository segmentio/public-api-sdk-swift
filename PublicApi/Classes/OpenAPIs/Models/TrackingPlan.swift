//
// TrackingPlan.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The requested Tracking Plan. */
public struct TrackingPlan: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case live = "LIVE"
        case propertyLibrary = "PROPERTY_LIBRARY"
        case ruleLibrary = "RULE_LIBRARY"
        case template = "TEMPLATE"
    }
    /** The Tracking Plan's identifier.  Config API note: analogous to `name`. */
    public var id: String
    /** The Tracking Plan's name.  Config API note: equal to `displayName`. */
    public var name: String?
    /** URL-friendly slug of this Tracking Plan.  Config API note: equal to `name`. */
    public var slug: String?
    /** The Tracking Plan's description. */
    public var description: String?
    /** The Tracking Plan's type. */
    public var type: ModelType
    /** The timestamp of the last change to the Tracking Plan.  Config API note: equal to `updateTime`. */
    public var updatedAt: String?
    /** The timestamp of this Tracking Plan's creation.  Config API note: equal to `createTime`. */
    public var createdAt: String?

    public init(id: String, name: String? = nil, slug: String? = nil, description: String? = nil, type: ModelType, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.name = name
        self.slug = slug
        self.description = description
        self.type = type
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case slug
        case description
        case type
        case updatedAt
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

