//
// WarehouseSelectiveSyncItemV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents an entry in the Warehouse Selective Sync schema for a Warehouse and Source pair. */
public struct WarehouseSelectiveSyncItemV1: Codable, JSONEncodable, Hashable {

    /** The Source id attached to this Warehouse. */
    public var sourceId: String
    /** The collection within the Source. */
    public var collection: String
    /** The id of the Warehouse this sync belongs to. */
    public var warehouseId: String
    /** Whether this Selective Sync item is enabled. */
    public var enabled: Bool
    /** Source id attached to this sync. */
    public var source: String?
    /** A map that contains the properties within the collection to which the Warehouse should sync. */
    public var properties: [String: AnyCodable]

    public init(sourceId: String, collection: String, warehouseId: String, enabled: Bool, source: String? = nil, properties: [String: AnyCodable]) {
        self.sourceId = sourceId
        self.collection = collection
        self.warehouseId = warehouseId
        self.enabled = enabled
        self.source = source
        self.properties = properties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceId
        case collection
        case warehouseId
        case enabled
        case source
        case properties
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(collection, forKey: .collection)
        try container.encode(warehouseId, forKey: .warehouseId)
        try container.encode(enabled, forKey: .enabled)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encode(properties, forKey: .properties)
    }
}

