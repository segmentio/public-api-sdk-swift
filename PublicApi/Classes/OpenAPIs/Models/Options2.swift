//
// Options2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents the options of Including Anonymous users and Historical Data. */
public struct Options2: Codable, JSONEncodable, Hashable {

    /** Determines whether data prior to the audience being created is included when determining audience membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true. */
    public var includeHistoricalData: Bool?
    /** The set of profile external identifiers being used to determine audience membership. Profiles will only be considered for audience membership if the profile has at least one external id whose key matches a value in this set. If unspecified, a default set of external identifiers will be used: ['user_id', 'email', 'android.idfa', 'ios.idfa']. */
    public var filterByExternalIds: [String]?
    /** If specified, the value of this field indicates the number of days (specified from the date the audience was created) that event data will be included from when determining audience membership. If not specified, the default is set to the maximum event window size, or 7 days if no window condition is defined. Note that this is applied on a best-effort basis and may not always be applicable. In such cases, the response will not return a backfillEventDataDays value, and all available data will be taken into account. Note that includeHistoricalData must be set to true. */
    public var backfillEventDataDays: Double?

    public init(includeHistoricalData: Bool? = nil, filterByExternalIds: [String]? = nil, backfillEventDataDays: Double? = nil) {
        self.includeHistoricalData = includeHistoricalData
        self.filterByExternalIds = filterByExternalIds
        self.backfillEventDataDays = backfillEventDataDays
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case includeHistoricalData
        case filterByExternalIds
        case backfillEventDataDays
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(includeHistoricalData, forKey: .includeHistoricalData)
        try container.encodeIfPresent(filterByExternalIds, forKey: .filterByExternalIds)
        try container.encodeIfPresent(backfillEventDataDays, forKey: .backfillEventDataDays)
    }
}

