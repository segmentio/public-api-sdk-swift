//
// Options2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Options which should be applied when segmenting audiences. */
public struct Options2: Codable, JSONEncodable, Hashable {

    /** The set of profile external identifiers being used to determine audience membership. Profiles will only be considered for audience membership if the profile has at least one external id whose key matches a value in this set. */
    public var filterByExternalIds: [String]
    /** If specified, the value of this field indicates the number of days, specified from the date the audience was created, that event data will be included from when determining audience membership. If unspecified, defer to the value of `includeHistoricalData` to determine whether historical data is either entirely included or entirely excluded when determining audience membership. */
    public var backfillEventDataDays: Double?
    /** Determines whether data prior to the audience being created is included when determining audience membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true. */
    public var includeHistoricalData: Bool?
    /** Determines whether anonymous users should be included when determining audience membership. */
    public var includeAnonymousUsers: Bool?

    public init(filterByExternalIds: [String], backfillEventDataDays: Double? = nil, includeHistoricalData: Bool? = nil, includeAnonymousUsers: Bool? = nil) {
        self.filterByExternalIds = filterByExternalIds
        self.backfillEventDataDays = backfillEventDataDays
        self.includeHistoricalData = includeHistoricalData
        self.includeAnonymousUsers = includeAnonymousUsers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filterByExternalIds
        case backfillEventDataDays
        case includeHistoricalData
        case includeAnonymousUsers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(filterByExternalIds, forKey: .filterByExternalIds)
        try container.encodeIfPresent(backfillEventDataDays, forKey: .backfillEventDataDays)
        try container.encodeIfPresent(includeHistoricalData, forKey: .includeHistoricalData)
        try container.encodeIfPresent(includeAnonymousUsers, forKey: .includeAnonymousUsers)
    }
}

