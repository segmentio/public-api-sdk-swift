//
// RegulationListEntryV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RegulationListEntryV1: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case failed = "FAILED"
        case finished = "FINISHED"
        case initialized = "INITIALIZED"
        case invalid = "INVALID"
        case inProgress = "IN_PROGRESS"
        case notSupported = "NOT_SUPPORTED"
        case partialSuccess = "PARTIAL_SUCCESS"
    }
    public enum RegulationType: String, Codable, CaseIterable {
        case deleteArchiveOnly = "DELETE_ARCHIVE_ONLY"
        case deleteInternal = "DELETE_INTERNAL"
        case deleteOnly = "DELETE_ONLY"
        case suppressOnly = "SUPPRESS_ONLY"
        case suppressWithDelete = "SUPPRESS_WITH_DELETE"
        case suppressWithDeleteInternal = "SUPPRESS_WITH_DELETE_INTERNAL"
        case unsuppress = "UNSUPPRESS"
    }
    /** The id of the regulate request. */
    public var id: String
    /** The subject type. */
    public var subjectType: String
    /** The list of `userId` or `objectId` values of the subjects to regulate. */
    public var subjects: [String]
    /** The current status of the regulate request. */
    public var status: Status
    /** The timestamp of the creation of the request. */
    public var createdAt: String
    /** The regulation type. */
    public var regulationType: RegulationType
    /** The timestamp of when the request finished. */
    public var finishedAt: String?

    public init(id: String, subjectType: String, subjects: [String], status: Status, createdAt: String, regulationType: RegulationType, finishedAt: String? = nil) {
        self.id = id
        self.subjectType = subjectType
        self.subjects = subjects
        self.status = status
        self.createdAt = createdAt
        self.regulationType = regulationType
        self.finishedAt = finishedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case subjectType
        case subjects
        case status
        case createdAt
        case regulationType
        case finishedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(subjectType, forKey: .subjectType)
        try container.encode(subjects, forKey: .subjects)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(regulationType, forKey: .regulationType)
        try container.encodeIfPresent(finishedAt, forKey: .finishedAt)
    }
}

