//
// TransformationBeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a Transformation. */
public struct TransformationBeta: Codable, JSONEncodable, Hashable {

    /** The id of the Transformation. */
    public var id: String
    /** The name of the Transformation. */
    public var name: String
    /** The Source associated with the Transformation. */
    public var sourceId: String
    /** The optional Destination metadata associated with the Transformation. */
    public var destinationMetadataId: String?
    /** If the Transformation is enabled. */
    public var enabled: Bool
    /** If statement ([FQL](https://segment.com/docs/config-api/fql/)) to match events.  For standard event matchers, use the following:   Track -\\> \"event='\\<eventName\\>'\"   Identify -\\> \"type='identify'\"   Group -\\> \"type='group'\" */
    public var _if: String
    /** Optional new event name for renaming events. Works only for 'track' event type. */
    public var newEventName: String?
    /** Optional array for renaming properties collected by your events. */
    public var propertyRenames: [PropertyRenameBeta]?

    public init(id: String, name: String, sourceId: String, destinationMetadataId: String? = nil, enabled: Bool, _if: String, newEventName: String? = nil, propertyRenames: [PropertyRenameBeta]? = nil) {
        self.id = id
        self.name = name
        self.sourceId = sourceId
        self.destinationMetadataId = destinationMetadataId
        self.enabled = enabled
        self._if = _if
        self.newEventName = newEventName
        self.propertyRenames = propertyRenames
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case sourceId
        case destinationMetadataId
        case enabled
        case _if = "if"
        case newEventName
        case propertyRenames
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encodeIfPresent(destinationMetadataId, forKey: .destinationMetadataId)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(_if, forKey: ._if)
        try container.encodeIfPresent(newEventName, forKey: .newEventName)
        try container.encodeIfPresent(propertyRenames, forKey: .propertyRenames)
    }
}

