//
// SimpleDestination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SimpleDestination: Codable, JSONEncodable, Hashable {

    /** The id of the Integration. */
    public var id: String
    /** The name of the Destination. */
    public var name: String?
    /** The Source of the Destination. */
    public var sourceId: String
    /** Whether the Integration is enabled or not. */
    public var enabled: Bool
    /** When the Integration connection was created. */
    public var createdAt: String
    /** When the Integration connection was last updated. */
    public var updatedAt: String
    /** The Destination settings. */
    public var settings: [String: AnyCodable]
    /** The Destination id. */
    public var destinationId: String
    public var metadata: Metadata?
    public var idSync: IdSync?

    public init(id: String, name: String? = nil, sourceId: String, enabled: Bool, createdAt: String, updatedAt: String, settings: [String: AnyCodable], destinationId: String, metadata: Metadata? = nil, idSync: IdSync? = nil) {
        self.id = id
        self.name = name
        self.sourceId = sourceId
        self.enabled = enabled
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.settings = settings
        self.destinationId = destinationId
        self.metadata = metadata
        self.idSync = idSync
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case sourceId
        case enabled
        case createdAt
        case updatedAt
        case settings
        case destinationId
        case metadata
        case idSync
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(settings, forKey: .settings)
        try container.encode(destinationId, forKey: .destinationId)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(idSync, forKey: .idSync)
    }
}

