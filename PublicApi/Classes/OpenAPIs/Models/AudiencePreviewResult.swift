//
// AudiencePreviewResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AudiencePreviewResult: Codable, JSONEncodable, Hashable {

    /** Entity id. */
    public var id: String
    /** Related entities that are one level deeper will only be returned if those entities are referenced in the audience definition. */
    public var entities: [String: AnyCodable]?
    /** The entity primary key column name. */
    public var idProperty: String
    /** The entity relationship slug. */
    public var relationshipSlug: String
    /** The entity properties. */
    public var properties: JSON?
    /** Related list of profiles. */
    public var profiles: [Profile]?
    /** Indicates if only a subset of the profiles associated with the entity were returned. */
    public var profilesTruncated: Bool

    public init(id: String, entities: [String: AnyCodable]? = nil, idProperty: String, relationshipSlug: String, properties: JSON? = nil, profiles: [Profile]? = nil, profilesTruncated: Bool) {
        self.id = id
        self.entities = entities
        self.idProperty = idProperty
        self.relationshipSlug = relationshipSlug
        self.properties = properties
        self.profiles = profiles
        self.profilesTruncated = profilesTruncated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case entities
        case idProperty
        case relationshipSlug
        case properties
        case profiles
        case profilesTruncated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(entities, forKey: .entities)
        try container.encode(idProperty, forKey: .idProperty)
        try container.encode(relationshipSlug, forKey: .relationshipSlug)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(profiles, forKey: .profiles)
        try container.encode(profilesTruncated, forKey: .profilesTruncated)
    }
}

