//
// UpdateActivationForAudienceAlphaInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Input to update an activation. */
public struct UpdateActivationForAudienceAlphaInput: Codable, JSONEncodable, Hashable {

    /** The Workspace id. */
    public var workspaceId: String
    /** Determines whether an activation is enabled. */
    public var enabled: Bool?
    /** Configuration settings for the event emitter to be created. */
    public var eventEmitter: AnyCodable?
    /** Subscription info to connect the event emitter to a Destination attached to the audience. */
    public var subscription: AnyCodable?

    public init(workspaceId: String, enabled: Bool? = nil, eventEmitter: AnyCodable?, subscription: AnyCodable?) {
        self.workspaceId = workspaceId
        self.enabled = enabled
        self.eventEmitter = eventEmitter
        self.subscription = subscription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case workspaceId
        case enabled
        case eventEmitter
        case subscription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(workspaceId, forKey: .workspaceId)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(eventEmitter, forKey: .eventEmitter)
        try container.encode(subscription, forKey: .subscription)
    }
}

