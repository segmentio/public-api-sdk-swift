//
// SourceMetadataV1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A website, server library, mobile SDK, or cloud application which can send data into Segment. */
public struct SourceMetadataV1: Codable, JSONEncodable, Hashable {

    /** The id for this Source metadata in the Segment catalog.  Config API note: analogous to `name`. */
    public var id: String
    /** The user-friendly name of this Source.  Config API note: equal to `displayName`. */
    public var name: String
    /** The slug that identifies this Source in the Segment app.  Config API note: equal to `name`. */
    public var slug: String
    /** The description of this Source. */
    public var description: String
    public var logos: Logos1
    /** Options for this Source. */
    public var options: [IntegrationOptionBeta]
    /** A list of categories this Source belongs to. */
    public var categories: [String]
    /** True if this is a Cloud Event Source. */
    public var isCloudEventSource: Bool

    public init(id: String, name: String, slug: String, description: String, logos: Logos1, options: [IntegrationOptionBeta], categories: [String], isCloudEventSource: Bool) {
        self.id = id
        self.name = name
        self.slug = slug
        self.description = description
        self.logos = logos
        self.options = options
        self.categories = categories
        self.isCloudEventSource = isCloudEventSource
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case slug
        case description
        case logos
        case options
        case categories
        case isCloudEventSource
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(slug, forKey: .slug)
        try container.encode(description, forKey: .description)
        try container.encode(logos, forKey: .logos)
        try container.encode(options, forKey: .options)
        try container.encode(categories, forKey: .categories)
        try container.encode(isCloudEventSource, forKey: .isCloudEventSource)
    }
}

