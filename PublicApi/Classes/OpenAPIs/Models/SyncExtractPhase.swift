//
// SyncExtractPhase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object representing the extract phase + details. */
public struct SyncExtractPhase: Codable, JSONEncodable, Hashable {

    /** Counts the subset of records with status=new, which indicates records that were created/inserted/added. */
    public var addedCount: String
    /** Counts the subset of records with status=updated, which indicates records that were modified/updated. */
    public var updatedCount: String
    /** Counts the subset of records with status=deleted, which indicates records that were deleted/removed. */
    public var deletedCount: String
    /** Counts the total number of records/rows handled by extract, across all statuses. */
    public var extractCount: String
    /** Error code indicates a fatal sync error code, if applicable. */
    public var errorCode: String
    /** Time that the extract phase started. */
    public var startedAt: String
    /** Time that the extract phase finished. */
    public var finishedAt: String

    public init(addedCount: String, updatedCount: String, deletedCount: String, extractCount: String, errorCode: String, startedAt: String, finishedAt: String) {
        self.addedCount = addedCount
        self.updatedCount = updatedCount
        self.deletedCount = deletedCount
        self.extractCount = extractCount
        self.errorCode = errorCode
        self.startedAt = startedAt
        self.finishedAt = finishedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addedCount
        case updatedCount
        case deletedCount
        case extractCount
        case errorCode
        case startedAt
        case finishedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(addedCount, forKey: .addedCount)
        try container.encode(updatedCount, forKey: .updatedCount)
        try container.encode(deletedCount, forKey: .deletedCount)
        try container.encode(extractCount, forKey: .extractCount)
        try container.encode(errorCode, forKey: .errorCode)
        try container.encode(startedAt, forKey: .startedAt)
        try container.encode(finishedAt, forKey: .finishedAt)
    }
}

