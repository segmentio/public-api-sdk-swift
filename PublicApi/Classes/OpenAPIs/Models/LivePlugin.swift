//
// LivePlugin.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The latest version of Live Plugin bundle. */
public struct LivePlugin: Codable, JSONEncodable, Hashable {

    /** The Live Plugin id. */
    public var id: String
    /** The Source id. */
    public var sourceId: String
    /** Creation date. */
    public var createdAt: String
    /** Creating user's id. */
    public var createdBy: String
    /** The CDN URL that can be used to fetch your latest Live Plugin bundle. */
    public var downloadURL: String
    /** Revision number associated with the latest Live Plugin. */
    public var version: Double
    /** The code of the Live Plugin. */
    public var code: String?

    public init(id: String, sourceId: String, createdAt: String, createdBy: String, downloadURL: String, version: Double, code: String? = nil) {
        self.id = id
        self.sourceId = sourceId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.downloadURL = downloadURL
        self.version = version
        self.code = code
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sourceId
        case createdAt
        case createdBy
        case downloadURL
        case version
        case code
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(sourceId, forKey: .sourceId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(downloadURL, forKey: .downloadURL)
        try container.encode(version, forKey: .version)
        try container.encodeIfPresent(code, forKey: .code)
    }
}

