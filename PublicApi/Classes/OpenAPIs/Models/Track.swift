//
// Track.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Track settings. */
public struct Track: Codable, JSONEncodable, Hashable {

    public enum CommonEventOnViolations: String, Codable, CaseIterable {
        case allow = "ALLOW"
        case block = "BLOCK"
        case omitProperties = "OMIT_PROPERTIES"
    }
    /** Enable to allow unplanned track events.  Config API note: equal to `allowUnplannedTrackEvents`. */
    public var allowUnplannedEvents: Bool?
    /** Enable to allow unplanned track event properties.  Config API note: equal to `allowUnplannedTrackEventProperties`. */
    public var allowUnplannedEventProperties: Bool?
    /** Allow track event on violations.  Config API note: equal to `allowTrackEventOnViolations`. */
    public var allowEventOnViolations: Bool?
    /** Enable to allow track properties on violations.  Config API note: equal to `allowTrackEventPropertiesOnViolations`. */
    public var allowPropertiesOnViolations: Bool?
    /** The common track event on violations.  Config API note: equal to `commonTrackEventOnViolations`. */
    public var commonEventOnViolations: CommonEventOnViolations?

    public init(allowUnplannedEvents: Bool? = nil, allowUnplannedEventProperties: Bool? = nil, allowEventOnViolations: Bool? = nil, allowPropertiesOnViolations: Bool? = nil, commonEventOnViolations: CommonEventOnViolations? = nil) {
        self.allowUnplannedEvents = allowUnplannedEvents
        self.allowUnplannedEventProperties = allowUnplannedEventProperties
        self.allowEventOnViolations = allowEventOnViolations
        self.allowPropertiesOnViolations = allowPropertiesOnViolations
        self.commonEventOnViolations = commonEventOnViolations
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowUnplannedEvents
        case allowUnplannedEventProperties
        case allowEventOnViolations
        case allowPropertiesOnViolations
        case commonEventOnViolations
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowUnplannedEvents, forKey: .allowUnplannedEvents)
        try container.encodeIfPresent(allowUnplannedEventProperties, forKey: .allowUnplannedEventProperties)
        try container.encodeIfPresent(allowEventOnViolations, forKey: .allowEventOnViolations)
        try container.encodeIfPresent(allowPropertiesOnViolations, forKey: .allowPropertiesOnViolations)
        try container.encodeIfPresent(commonEventOnViolations, forKey: .commonEventOnViolations)
    }
}

