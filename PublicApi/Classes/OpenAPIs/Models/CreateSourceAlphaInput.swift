//
// CreateSourceAlphaInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Create a new Source based on a set of parameters. */
public struct CreateSourceAlphaInput: Codable, JSONEncodable, Hashable {

    /** The slug by which to identify the Source in the Segment app. */
    public var slug: String
    /** Enable to allow this Source to send data. Defaults to true. */
    public var enabled: Bool
    /** An optional human-readable name for this Source. */
    public var name: String?
    /** The id of the Source metadata from which this instance of the Source derives.  All Source metadata is available under `/catalog/sources`. */
    public var metadataId: String
    /** A key-value object that contains instance-specific settings for the Source. */
    public var settings: JSON?

    public init(slug: String, enabled: Bool, name: String? = nil, metadataId: String, settings: JSON? = nil) {
        self.slug = slug
        self.enabled = enabled
        self.name = name
        self.metadataId = metadataId
        self.settings = settings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case slug
        case enabled
        case name
        case metadataId
        case settings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(slug, forKey: .slug)
        try container.encode(enabled, forKey: .enabled)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(metadataId, forKey: .metadataId)
        try container.encodeIfPresent(settings, forKey: .settings)
    }
}

