//
// CancelReverseETLSyncForModelOutput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CancelReverseETLSyncForModelOutput either will return an error or a \&quot;CANCELLING\&quot; status. */
public struct CancelReverseETLSyncForModelOutput: Codable, JSONEncodable, Hashable {

    /** The id of the Model. */
    public var modelId: String
    /** The id of the Sync. */
    public var syncId: String
    /** A place holder for a machine-friendly category for an error, if applicable. - \"SyncAlreadyCanceled\" - \"SyncFinishedCannotCancel\" */
    public var errorCode: String?
    /** A place holder for a human-readable description of the error, if applicable. - \"sync already canceled\" - \"sync already finished\". */
    public var errorMessage: String?
    /** If no error, status will be CANCELLING, as the extract/load might take some time to cancel. */
    public var status: String?

    public init(modelId: String, syncId: String, errorCode: String? = nil, errorMessage: String? = nil, status: String? = nil) {
        self.modelId = modelId
        self.syncId = syncId
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case modelId
        case syncId
        case errorCode
        case errorMessage
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(modelId, forKey: .modelId)
        try container.encode(syncId, forKey: .syncId)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

