//
// FailedAudiencePreview.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Audience preview that has failed to calculate. */
public struct FailedAudiencePreview: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case failed = "FAILED"
    }
    public enum AudienceType: String, Codable, CaseIterable {
        case accounts = "ACCOUNTS"
        case users = "USERS"
    }
    /** Status for the audience preview. */
    public var status: Status
    /** Explanation of why the audience preview failed, if available. */
    public var failureReason: String?
    /** Unique identifier for tracking and retrieving results of an audience preview. */
    public var id: String
    /** The audience type of the preview. */
    public var audienceType: AudienceType
    public var definition: Definition6
    public var options: Options4

    public init(status: Status, failureReason: String? = nil, id: String, audienceType: AudienceType, definition: Definition6, options: Options4) {
        self.status = status
        self.failureReason = failureReason
        self.id = id
        self.audienceType = audienceType
        self.definition = definition
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case failureReason
        case id
        case audienceType
        case definition
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(failureReason, forKey: .failureReason)
        try container.encode(id, forKey: .id)
        try container.encode(audienceType, forKey: .audienceType)
        try container.encode(definition, forKey: .definition)
        try container.encode(options, forKey: .options)
    }
}

