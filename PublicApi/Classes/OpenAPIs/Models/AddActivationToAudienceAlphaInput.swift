//
// AddActivationToAudienceAlphaInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Input to create an activation. */
public struct AddActivationToAudienceAlphaInput: Codable, JSONEncodable, Hashable {

    /** Whether the event emitter should be created in an enabled state. Will trigger an audience run if enabled. */
    public var enabled: Bool?
    /** Whether to perform the first sync so the activation events are generated on the first audience sync. */
    public var performFirstSync: Bool
    /** Type of activation trigger. */
    public var activationType: String
    /** Name of the activation. */
    public var activationName: String
    public var personalization: Personalization
    public var destinationMapping: DestinationMapping

    public init(enabled: Bool? = nil, performFirstSync: Bool, activationType: String, activationName: String, personalization: Personalization, destinationMapping: DestinationMapping) {
        self.enabled = enabled
        self.performFirstSync = performFirstSync
        self.activationType = activationType
        self.activationName = activationName
        self.personalization = personalization
        self.destinationMapping = destinationMapping
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enabled
        case performFirstSync
        case activationType
        case activationName
        case personalization
        case destinationMapping
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(performFirstSync, forKey: .performFirstSync)
        try container.encode(activationType, forKey: .activationType)
        try container.encode(activationName, forKey: .activationName)
        try container.encode(personalization, forKey: .personalization)
        try container.encode(destinationMapping, forKey: .destinationMapping)
    }
}

